# -*- coding: utf-8 -*-
"""merge_and_save.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16BWnNuclq5LOEYS1tYI_3GXyfoIvzmOE
"""

#I will be usiing google colab + google drive

from google.colab import drive
import os

# Mount Google Drive
drive.mount('/content/drive')

# Set working directory to your "merge" folder
project_dir = '/content/drive/MyDrive/merge'
os.chdir(project_dir)
print("Current working directory:", os.getcwd())

import pandas as pd
import sqlite3

# Load CSV files from your "merge" folder
df_breeds = pd.read_csv('dog_breeds.csv')       # from scraping
df_images = pd.read_csv('dog_images.csv')       # from API calls

# Match column names
df_images.rename(columns={'Breed Name': 'Breed'}, inplace=True)

# Merge on 'Breed'
df_final = pd.merge(df_breeds, df_images, on='Breed', how='inner')

# Show merged result
print(f"Merged {len(df_final)} dog breeds")
print(df_final.head())

# Describe the data
print("\nDescriptive Statistics:")
print(df_final.describe(include='all'))

# Save merged CSV to your Google Drive
df_final.to_csv('final_dog_breed_data.csv', index=False)

# Save to SQLite DB file in your merge folder
conn = sqlite3.connect('dog_breeds.db')
df_final.to_sql('dog_breeds', conn, if_exists='replace', index=False)
conn.close()

print("Saved to dog_breeds.db in Google Drive merge folder")

import sqlite3

# Connect to saved database file in Drive folder
conn = sqlite3.connect('dog_breeds.db')
cursor = conn.cursor()

# See what tables exist
cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
print("Tables in DB:", cursor.fetchall())

#Now let's make sure everything in thr SQL DB looks right

# See first 5 rows
cursor.execute("SELECT * FROM dog_breeds LIMIT 5;")
rows = cursor.fetchall()

# Print column names
column_names = [desc[0] for desc in cursor.description]
print(column_names)

# Print the rows
for row in rows:
    print(row)

import pandas as pd

#I want to clean up this combined dataframe to make it more readable

# Load the CSV
df = pd.read_csv("final_dog_breed_data.csv")

# Drop index column if it exists
if 'Unnamed: 0' in df.columns:
    df = df.drop(columns=['Unnamed: 0'])

# Rename columns
df.columns = ['Breed', 'Male Weight', 'Female Weight', 'Image URL']

# Strip whitespace from all string cells
for col in df.columns:
    df[col] = df[col].astype(str).str.strip()

# Show preview
print(df.head())

# Save cleaned CSV
df.to_csv("final_dog_breed_data_cleaned.csv", index=False)

#Now let's check if the SQL works and to also clean it up to make sure that it is easier to read/understand

import sqlite3

# Connect to your SQLite database
conn = sqlite3.connect('dog_breeds.db')
cursor = conn.cursor()

cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
print("Tables in database:", cursor.fetchall())


import pandas as pd
import sqlite3

# Load the CSV (with or without the column)
df = pd.read_csv("final_dog_breed_data_cleaned.csv")

# Drop "Unnamed: 0" if it exists
if 'Unnamed: 0' in df.columns:
    df = df.drop(columns=['Unnamed: 0'])

# Save to SQLite again (overwrite)
conn = sqlite3.connect("dog_breeds.db")
df.to_sql("dog_breeds", conn, if_exists='replace', index=False)
conn.close()

print("Saved to database without 'Unnamed: 0'")


cursor.execute("SELECT * FROM dog_breeds LIMIT 5;")
rows = cursor.fetchall()

# Show column names
column_names = [desc[0] for desc in cursor.description]
print("Columns:", column_names)

# Show example rows
for row in rows:
    print(row)

#Now I want to further the cleanup by having the final SQL DB and CSV to have average weight rather than the interval (just to make it easier to read)

import pandas as pd
import sqlite3

# Load the cleaned CSV
df = pd.read_csv("final_dog_breed_data_cleaned.csv")

# Function to get average weight using string.split()
def average_weight(weight):
    if isinstance(weight, str):
        weight = weight.replace("pounds", "").strip()
        parts = weight.split('-')
        if len(parts) == 2:
            try:
                return (int(parts[0]) + int(parts[1])) / 2
            except:
                return None
        elif len(parts) == 1:
            try:
                return int(parts[0])
            except:
                return None
    return None

# Apply to both columns
df['Male Avg Weight'] = df['Male Weight'].apply(average_weight)
df['Female Avg Weight'] = df['Female Weight'].apply(average_weight)

# Drop the original weight columns
df = df.drop(columns=['Male Weight', 'Female Weight'])

# Save new CSV
df.to_csv("final_dog_breed_data_weight_avg.csv", index=False)

# Save to SQLite DB
conn = sqlite3.connect("dog_breeds.db")
df.to_sql("dog_breeds", conn, if_exists='replace', index=False)
conn.close()

#Let's display the whole table

display(df)

#Now lets print statistic description

print("\nDescription Statistics:")
print(df.describe())